#include <windows.h>
#include <wininet.h>
#include <stdio.h>
#include <iostream>

#pragma comment(lib, "wininet")

LPCWSTR DEFAULT_USERAGENT = L"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1";
LPCWSTR MY_HOST = L"192.168.1.101";
#define ALT_HTTP_PORT 8080
LPCWSTR METHOD_POST = L"POST";
#define BUFSIZE 1024

#include <memory>
#include <algorithm>

using namespace std;

struct FileCloser
{
	typedef HANDLE pointer;

	void operator()(HANDLE h)
	{
		if (h != INVALID_HANDLE_VALUE)
			CloseHandle(h);
	}
};

struct InetCloser
{
	typedef HINTERNET pointer;

	void operator()(HINTERNET h)
	{
		if (h != NULL)
			InternetCloseHandle(h);
	}
};

bool WriteToInternet(HINTERNET hInet, const void *Data, DWORD DataSize)
{
	const BYTE *pData = (const BYTE *)Data;
	DWORD dwBytes;

	while (DataSize > 0)
	{
		if (!InternetWriteFile(hInet, pData, DataSize, &dwBytes))
			return false;
		pData += dwBytes;
		DataSize -= dwBytes;
	}

	return true;
}

void UploadFile()
{
	const char *szHeaders = "Content-Type: multipart/form-data; boundary=----974767299852498929531610575";
	const char *szContent = "------974767299852498929531610575\r\nContent-Disposition: form-data; name=\"file\"; filename=\"main.cpp\"\r\nContent-Type: application/octet-stream\r\n\r\n";
	const char *szEndData = "\r\n------974767299852498929531610575--\r\n";

	unique_ptr<HANDLE, FileCloser> hIn(CreateFile(L"main.cpp", GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL | FILE_FLAG_SEQUENTIAL_SCAN, NULL));
	if (hIn.get() == INVALID_HANDLE_VALUE)
	{
		std::cerr << "CreateFile Error" << std::endl;
		return;
	}

	DWORD dwFileSize = GetFileSize(hIn.get(), NULL);
	if (dwFileSize == INVALID_FILE_SIZE)
	{
		std::cerr << "GetFileSize Error" << std::endl;
		return;
	}

	unique_ptr<HINTERNET, InetCloser> io(InternetOpen(DEFAULT_USERAGENT, INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0));
	if (io.get() == NULL)
	{
		std::cerr << "InternetOpen Error" << std::endl;
		return;
	}

	unique_ptr<HINTERNET, InetCloser> ic(InternetConnect(io.get(), MY_HOST, ALT_HTTP_PORT, NULL, NULL, INTERNET_SERVICE_HTTP, 0, 0));
	if (ic.get() == NULL)
	{
		std::cerr << "InternetConnect Error" << std::endl;
		return;
	}

	unique_ptr<HINTERNET, InetCloser> hreq(HttpOpenRequest(ic.get(), METHOD_POST, L"/upload", NULL, NULL, NULL, 0, 0));
	if (hreq.get() == NULL)
	{
		std::cerr << "HttpOpenRequest Error" << std::endl;
		return;
	}

	if (!HttpAddRequestHeaders(hreq.get(), (LPCWSTR)szHeaders, -1, HTTP_ADDREQ_FLAG_REPLACE | HTTP_ADDREQ_FLAG_ADD))
	{
		std::cerr << "HttpAddRequestHeaders Error" << std::endl;
		return;
	}

	size_t sContentSize = strlen(szContent);
	size_t sEndDataSize = strlen(szEndData);

	INTERNET_BUFFERS bufferIn = {};
	bufferIn.dwStructSize = sizeof(INTERNET_BUFFERS);
	bufferIn.dwBufferTotal = sContentSize + dwFileSize + sEndDataSize;

	if (!HttpSendRequestEx(hreq.get(), &bufferIn, NULL, HSR_INITIATE, 0))
	{
		std::cerr << "HttpSendRequestEx Error" << std::endl;
		return;
	}

	if (!WriteToInternet(hreq.get(), szContent, sContentSize))
	{
	std::cerr << "InternetWriteFile Error" << std::endl;
	return;
	}

	char szData[BUFSIZE];
	DWORD dw = 0, dwBytes;

	while (dw < dwFileSize)
	{
		if (!ReadFile(hIn.get(), szData, min(dwFileSize - dw, sizeof(szData)), &dwBytes, NULL))
		{
			std::cerr << "ReadFile Error" << std::endl;
			return;
		}

		if (!WriteToInternet(hreq.get(), szData, dwBytes))
		{
			std::cerr << "InternetWriteFile Error" << std::endl;
			return;
		}

		dw += dwBytes;
	}

	if (!WriteToInternet(hreq.get(), szEndData, sEndDataSize))
	{
		std::cerr << "InternetWriteFile Error" << std::endl;
		return;
	}

	if (!HttpEndRequest(hreq.get(), NULL, HSR_INITIATE, 0))
		std::cerr << "HttpEndRequest Error" << std::endl;
}
